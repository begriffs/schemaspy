package net.sourceforge.schemaspy.view;

import java.io.IOException;
import net.sourceforge.schemaspy.model.Database;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.util.LineWriter;

public class HtmlFormatter {
    protected void writeHeader(Database db, Table table, String text, LineWriter out) throws IOException {
        out.writeln("<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>");
        out.writeln("<HTML>");
        out.writeln("<HEAD>");
        out.write("  <TITLE>SchemaSpy - ");
        out.write(getDescription(db, table, text, false));
        out.writeln("</TITLE>");
        out.write("  <LINK rel=stylesheet href='");
        if (table != null)
            out.write("../");
        out.writeln("schemaSpy.css' type='text/css'>");
        out.writeln("  <META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>");
        out.writeln("  <SCRIPT LANGUAGE='JavaScript' TYPE='text/javascript' SRC='" + (table == null ? "" : "../") + "schemaSpy.js'></SCRIPT>");
        out.writeln("</HEAD>");
//        if (table != null)
            out.writeln("<BODY onload='syncOptions()'>");
//        else
//            out.writeln("<BODY>");
        out.writeln("<table width='100%'>");
        out.writeln(" <tr>");
        out.write("  <td class='heading' valign='top'><h1>");
        if (table == null)
            out.write("SchemaSpy Analysis of ");
        out.write(getDescription(db, table, text, true));
        out.writeln("</h1></td>");
        out.writeln("  <td class='heading' align='right' valign='top' title='John Currier - Creator of Cool Tools'>Generated by<br><span class='signature'><a href='http://schemaspy.sourceforge.net'>SchemaSpy</a></span></td>");
        out.writeln(" </tr>");
        out.writeln("</table>");
        if (table == null) {
            out.write("Generated by <span class='signature'><a href='http://schemaspy.sourceforge.net'>SchemaSpy</a></span> on ");
            out.writeln(db.getConnectTime());
        }
    }

    protected String getDescription(Database db, Table table, String text, boolean hoverHelp) {
        StringBuffer description = new StringBuffer();
        if (table != null) {
            if (table.isView())
                description.append("View ");
            else
                description.append("Table ");
        }
        if (hoverHelp)
            description.append("<span title='Database'>");
        description.append(db.getName());
        if (hoverHelp)
            description.append("</span>");
        if (db.getSchema() != null) {
            description.append('.');
            if (hoverHelp)
                description.append("<span title='Schema'>");
            description.append(db.getSchema());
            if (hoverHelp)
                description.append("</span>");
        }
        if (table != null) {
            description.append('.');
            if (hoverHelp)
                description.append("<span title='Table'>");
            description.append(table.getName());
            if (hoverHelp)
                description.append("</span>");
        }
        if (text != null) {
            description.append(" - ");
            description.append(text);
        }

        return description.toString();
    }

    protected void writeLegend(boolean tableDetails, LineWriter out) throws IOException {
        out.write(" <table border='0' ");
        if (tableDetails)
            out.write("class='legend' ");
        out.writeln("style='text-align: left;'>");
        out.writeln("  <tr><td class='dataTable'>Legend:</td></tr>");
        out.writeln("  <tr><td>");
        out.writeln("   <table border='1' style='text-align: left;'>");
        out.writeln("    <tbody>");
        out.writeln("    <tr class='dataTable'><td class='primaryKey'>Primary key columns</td></tr>");
        out.writeln("    <tr class='dataTable'><td class='indexedColumn'>Columns with indexes</td></tr>");
        if (tableDetails)
            out.writeln("    <tr class='dataTable'><td class='impliedRelationship'>Implied relationships</tr>");
        out.writeln("    <tr class='dataTable'><td class='tableHolder'>Arrows go from children (foreign keys)" + (tableDetails ? "<br>" : " ") + "to parents (primary keys)</td></tr>");
        out.writeln("    <tr class='dataTable'><td class='tableHolder'>Dashed arrows represent" + (tableDetails ? "<br>" : " ") + "implied relationships</td></tr>");
        out.writeln("   </table>");
        out.writeln("  </td></tr>");
        out.writeln(" </table>");
    }

    protected void writeFooter(LineWriter out) throws IOException {
        out.writeln("</BODY>");
        out.writeln("</HTML>");
    }
}
